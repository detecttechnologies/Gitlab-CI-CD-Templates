include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - build
  - test
  - post
  - deploy

default:
  tags:
    - amd64

build_package:
  stage: build
  tags:
    - saas-linux-medium-amd64
  image: node:16.14.2
  script:
    - |
      if [ "$CI_PROJECT_NAME" != "tpulse-msa-fe-root-app" ]; then
        npm ci
        npm run build
        echo "Creating a distributable tarball of the dist directory"
        tar -czf "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz" -C dist .
      else
        # For root_repo, skip npm steps and create tarball without .git files
        apt-get update && apt-get install -y rsync
        echo "Creating a tarball for root_repo without .git files"
        mkdir temp_dir
        rsync -av --exclude='.git' --exclude='temp_dir' --exclude='.gitlab-ci.yml' --exclude='.vscode' ./ temp_dir/
        tar -czf "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz" -C temp_dir .
        rm -rf temp_dir
      fi
    - echo "Uploading the tarball to GitLab's Package Registry"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz"'
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_TAG

semgrep-sast:
  script:
    - /analyzer run
    - mv gl-sast-report.json semgrep-sast-report.json
  artifacts:
    paths:
      - semgrep-sast-report.json
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge-request-event"

nodejs-scan-sast:
  script:
    - /analyzer run
    - mv gl-sast-report.json nodejs-scan-sast-report.json
  artifacts:
    paths:
      - nodejs-scan-sast-report.json
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge-request-event"

secret_detection:
  script:
    - /analyzer run
    - mv gl-secret-detection-report.json secret-detection-report.json
  artifacts:
    paths:
      - secret-detection-report.json
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge-request-event"

code_quality:
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" 

analyze_reports:
  stage: post
  image: registry.gitlab.com/detecttechnologies/software/webapps/t-pulse/web/tpulse-msa/tpulse-msa-cicd:production
  variables:
    DOCKER_AUTH_CONFIG: '{"auths":{"registry.gitlab.com":{"username":"${CI_CD_API_USER}","password":"${CI_CD_API_TOKEN}"}}}'
  script:
    - bash /app/scripts/analyze_reports.sh
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge-request-event"

update_version_manifest:
  stage: post
  image: registry.gitlab.com/detecttechnologies/software/webapps/t-pulse/web/tpulse-msa/tpulse-msa-cicd:production
  variables:
    DOCKER_AUTH_CONFIG: '{"auths":{"registry.gitlab.com":{"username":"${CI_CD_API_USER}","password":"${CI_CD_API_TOKEN}"}}}'
  script:
    - python3 /app/scripts/version_manifest_manager.py
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_TAG

deploy_package:
  stage: deploy
  image: registry.gitlab.com/detecttechnologies/software/webapps/t-pulse/web/tpulse-msa/tpulse-msa-cicd:production
  variables:
    DOCKER_AUTH_CONFIG: '{"auths":{"registry.gitlab.com":{"username":"${CI_CD_API_USER}","password":"${CI_CD_API_TOKEN}"}}}'
  tags:
    - saas-linux-medium-amd64
  environment:
    name: $LIFECYCLE_STAGE
  script:
    - python3 /app/scripts/get_config_files.py
    - service chrony start
    - python3 /app/scripts/connect_vpn.py
    - sleep 5s
    - echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    - IP_ADDRESS=$(curl ifconfig.me)
    - echo "Public IP Address:$IP_ADDRESS"
    - python3 /app/scripts/deploy_fe.py
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - when: never